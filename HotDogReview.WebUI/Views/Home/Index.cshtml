@model IEnumerable<HotDogReview.WebUI.Models.Establishment>

@{
    ViewBag.Title = "Hot Dog Review";
}

<h2>Barraquinhas de Dogão em Curitiba</h2>

<div id="map-canvas" style="width: 800px; height: 380px;"></div>

<ul>
    @foreach(var item in Model)
    {
        <li>
            <h4>@item.Name</h4>
            <p>
                Nota @item.AverageRating (@item.Reviews.Count() avaliações)
            </p>
            <p>
                Endereço: @(item.Address ?? "<sem endereço>")
            </p>
            <p>
                @(item.Description ?? "<sem descrição>")
            </p>
        </li>
    }
</ul>

<hr />
<p>
    <a href="@Url.Action("Create", "Establishments")">[+] Cadastrar barraquinha</a>
</p>

<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNMP3K0GDuGhuhhDkXriZcIaL2DLMYD1M&sensor=false"></script>

<script>

    var HomeIndex = function () {

        var _map,
            _mapOverlays = [];

        function createMap() {
            _map = new google.maps.Map(document.getElementById("map-canvas"), {
                center: new google.maps.LatLng(-25.4166667, -49.25),
                zoom: 8,
                mapTypeId: google.maps.MapTypeId.ROADMAP });
        }

        function createMarker(index, resultItem) {
            var coords = new google.maps.LatLng(resultItem.lat, resultItem.lng);
            var marker = new google.maps.Marker({
                position: coords,
                title: resultItem.title + ' - ' + resultItem.averageRating });
            return marker;
        }

        function init() {
            createMap();
            setMarkers();
        }

        function setMarkers() {
            $.get('/Api/EstablishmentsApi/GetMarkers/', function (data) {
                _mapOverlays = [];
                debugger;
                $.each(data, function (index, item) {
                    var marker = createMarker(index, item);
                    marker.setMap(_map)
                    _mapOverlays.push(marker);
                });
                if (_mapOverlays.length) {
                    var bounds = new google.maps.LatLngBounds();
                    for (var i = 0; i < _mapOverlays.length; i++) {
                         bounds.extend(_mapOverlays[i].position);
                    }
                    _map.fitBounds(bounds);
                    var listener = google.maps.event.addListener(_map, "idle", function() { 
                        if (_map.getZoom() > 16) _map.setZoom(16); 
                        google.maps.event.removeListener(listener); 
                    });
                }
            });
        }

        return {
            init: init
        };

    } ();

    HomeIndex.init();

</script>